//// Code generated by parrot. DO NOT EDIT.
////

import gleam/dynamic/decode
import gleam/option.{type Option}
import gleam/time/timestamp.{type Timestamp}
import parrot/dev

pub type UsersStatus {
  Like
  Neutral
}

pub fn users_status_decoder() {
  use variant <- decode.then(decode.string)
  case variant {
    "like" -> decode.success(Like)
    "neutral" -> decode.success(Neutral)
    _ -> decode.failure(Like, "UsersStatus")
  }
}

pub fn users_status_to_string(val: UsersStatus) {
  case val {
    Like -> "like"
    Neutral -> "neutral"
  }
}

pub type GetUser {
  GetUser(
    id: Int,
    username: String,
    created_at: Option(Timestamp),
    status: Option(UsersStatus),
  )
}

pub fn get_user(id id: Int) {
  let sql =
    "SELECT
  id, username, created_at, status
FROM
  users
WHERE
  id = ?
LIMIT
  1"
  #(sql, [dev.ParamInt(id)], get_user_decoder())
}

pub fn get_user_decoder() -> decode.Decoder(GetUser) {
  use id <- decode.field(0, decode.int)
  use username <- decode.field(1, decode.string)
  use created_at <- decode.field(2, decode.optional(dev.datetime_decoder()))
  use status <- decode.field(3, decode.optional(users_status_decoder()))
  decode.success(GetUser(id:, username:, created_at:, status:))
}

pub type ListUsers {
  ListUsers(
    id: Int,
    username: String,
    created_at: Option(Timestamp),
    status: Option(UsersStatus),
  )
}

pub fn list_users() {
  let sql =
    "SELECT
  id, username, created_at, status
FROM
  users
ORDER BY
  created_at DESC"
  #(sql, [], list_users_decoder())
}

pub fn list_users_decoder() -> decode.Decoder(ListUsers) {
  use id <- decode.field(0, decode.int)
  use username <- decode.field(1, decode.string)
  use created_at <- decode.field(2, decode.optional(dev.datetime_decoder()))
  use status <- decode.field(3, decode.optional(users_status_decoder()))
  decode.success(ListUsers(id:, username:, created_at:, status:))
}

pub fn create_user(username username: String) {
  let sql =
    "INSERT INTO
  users (username)
VALUES
  (?)"
  #(sql, [dev.ParamString(username)])
}

pub fn update_user_username(username username: String, id id: Int) {
  let sql =
    "UPDATE users
SET
  username = ?
WHERE
  id = ?"
  #(sql, [dev.ParamString(username), dev.ParamInt(id)])
}

pub fn delete_user(id id: Int) {
  let sql =
    "DELETE FROM users
WHERE
  id = ?"
  #(sql, [dev.ParamInt(id)])
}

pub type GetUserByUsername {
  GetUserByUsername(
    id: Int,
    username: String,
    created_at: Option(Timestamp),
    status: Option(UsersStatus),
  )
}

pub fn get_user_by_username(username username: String) {
  let sql =
    "SELECT
  id, username, created_at, status
FROM
  users
WHERE
  username = ?
LIMIT
  1"
  #(sql, [dev.ParamString(username)], get_user_by_username_decoder())
}

pub fn get_user_by_username_decoder() -> decode.Decoder(GetUserByUsername) {
  use id <- decode.field(0, decode.int)
  use username <- decode.field(1, decode.string)
  use created_at <- decode.field(2, decode.optional(dev.datetime_decoder()))
  use status <- decode.field(3, decode.optional(users_status_decoder()))
  decode.success(GetUserByUsername(id:, username:, created_at:, status:))
}
