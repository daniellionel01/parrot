//// Code generated by parrot. DO NOT EDIT.
////

import gleam/dynamic/decode
import gleam/option.{type Option}
import parrot/dev

pub type Simple {
  Simple(col_0: Int)
}

pub fn simple() {
  let sql = "select 1"
  #(sql, [], simple_decoder())
}

pub fn simple_decoder() -> decode.Decoder(Simple) {
  use col_0 <- decode.field(0, decode.int)
  decode.success(Simple(col_0:))
}

pub type CountUsers {
  CountUsers(count: Int)
}

pub fn count_users() {
  let sql =
    "SELECT
  count(*)
FROM
  users"
  #(sql, [], count_users_decoder())
}

pub fn count_users_decoder() -> decode.Decoder(CountUsers) {
  use count <- decode.field(0, decode.int)
  decode.success(CountUsers(count:))
}

pub fn create_user(username username: String) {
  let sql =
    "INSERT INTO
  users (username)
VALUES
  (?)"
  #(sql, [dev.ParamString(username)])
}

pub fn create_user_with_role(
  username username: String,
  role role: Option(String),
) {
  let sql =
    "INSERT INTO
  users (username, role)
VALUES
  (?, ?)"
  #(sql, [
    dev.ParamString(username),
    dev.ParamNullable(option.map(role, fn(v) { dev.ParamString(v) })),
  ])
}

pub fn update_user_username(username username: String, id id: Int) {
  let sql =
    "UPDATE users
SET
  username = ?
WHERE
  id = ?"
  #(sql, [dev.ParamString(username), dev.ParamInt(id)])
}

pub type GetUserByUsername {
  GetUserByUsername(
    id: Int,
    username: String,
    created_at: Option(String),
    balance: Float,
    last_known_location: Option(Float),
    role: Option(String),
    avatar: Option(BitArray),
  )
}

pub fn get_user_by_username(username username: String) {
  let sql =
    "SELECT
  id, username, created_at, balance, last_known_location, role, avatar
FROM
  users
WHERE
  username = ?
LIMIT
  1"
  #(sql, [dev.ParamString(username)], get_user_by_username_decoder())
}

pub fn get_user_by_username_decoder() -> decode.Decoder(GetUserByUsername) {
  use id <- decode.field(0, decode.int)
  use username <- decode.field(1, decode.string)
  use created_at <- decode.field(2, decode.optional(decode.string))
  use balance <- decode.field(3, decode.float)
  use last_known_location <- decode.field(4, decode.optional(decode.float))
  use role <- decode.field(5, decode.optional(decode.string))
  use avatar <- decode.field(6, decode.optional(decode.bit_array))
  decode.success(GetUserByUsername(
    id:,
    username:,
    created_at:,
    balance:,
    last_known_location:,
    role:,
    avatar:,
  ))
}
