//// Code generated by parrot. DO NOT EDIT.
////

import gleam/dynamic/decode
import gleam/list
import gleam/option.{type Option}
import gleam/time/calendar.{type Date}
import gleam/time/timestamp.{type Timestamp}
import parrot/dev

pub type UserRole {
  Admin
  User
  Guest
}

pub fn user_role_decoder() {
  use variant <- decode.then(decode.string)
  case variant {
    "admin" -> decode.success(Admin)
    "user" -> decode.success(User)
    "guest" -> decode.success(Guest)
    _ -> decode.failure(Admin, "UserRole")
  }
}

pub fn user_role_to_string(val: UserRole) {
  case val {
    Admin -> "admin"
    User -> "user"
    Guest -> "guest"
  }
}

pub type RowJson {
  RowJson(row_to_json: String)
}

pub fn row_json() {
  let sql =
    "SELECT row_to_json(t)
FROM (
  SELECT id, username, created_at
  FROM users
  WHERE id = 1
) t"
  #(sql, [], row_json_decoder())
}

pub fn row_json_decoder() -> decode.Decoder(RowJson) {
  use row_to_json <- decode.field(0, decode.string)
  decode.success(RowJson(row_to_json:))
}

pub type Simple {
  Simple(col_0: Int)
}

pub fn simple() {
  let sql = "select 1"
  #(sql, [], simple_decoder())
}

pub fn simple_decoder() -> decode.Decoder(Simple) {
  use col_0 <- decode.field(0, decode.int)
  decode.success(Simple(col_0:))
}

pub type CreatedAtAsText {
  CreatedAtAsText(created_at: String)
}

pub fn created_at_as_text(id id: Int) {
  let sql = "SELECT created_at::text FROM users WHERE id = $1"
  #(sql, [dev.ParamInt(id)], created_at_as_text_decoder())
}

pub fn created_at_as_text_decoder() -> decode.Decoder(CreatedAtAsText) {
  use created_at <- decode.field(0, decode.string)
  decode.success(CreatedAtAsText(created_at:))
}

pub fn create_user_with_role(
  username username: String,
  role role: Option(UserRole),
) {
  let sql =
    "INSERT INTO
  users (username, role)
VALUES
  ($1, $2)"
  #(sql, [
    dev.ParamString(username),
    dev.ParamNullable(
      option.map(role, fn(v) { dev.ParamString(user_role_to_string(v)) }),
    ),
  ])
}

pub type GetUser {
  GetUser(
    id: Int,
    username: String,
    created_at: Option(Timestamp),
    date_of_birth: Option(Date),
    profile: Option(String),
    extra_info: Option(String),
    favorite_numbers: Option(List(Int)),
    role: Option(UserRole),
    document: Option(BitArray),
  )
}

pub fn get_user(id id: Int) {
  let sql =
    "SELECT
  id, username, created_at, date_of_birth, profile, extra_info, favorite_numbers, role, document
FROM
  users
WHERE
  id = $1
LIMIT
  1"
  #(sql, [dev.ParamInt(id)], get_user_decoder())
}

pub fn get_user_decoder() -> decode.Decoder(GetUser) {
  use id <- decode.field(0, decode.int)
  use username <- decode.field(1, decode.string)
  use created_at <- decode.field(2, decode.optional(dev.datetime_decoder()))
  use date_of_birth <- decode.field(
    3,
    decode.optional(dev.calendar_date_decoder()),
  )
  use profile <- decode.field(4, decode.optional(decode.string))
  use extra_info <- decode.field(5, decode.optional(decode.string))
  use favorite_numbers <- decode.field(
    6,
    decode.optional(decode.list(of: decode.int)),
  )
  use role <- decode.field(7, decode.optional(user_role_decoder()))
  use document <- decode.field(8, decode.optional(decode.bit_array))
  decode.success(GetUser(
    id:,
    username:,
    created_at:,
    date_of_birth:,
    profile:,
    extra_info:,
    favorite_numbers:,
    role:,
    document:,
  ))
}

pub type ListUsers {
  ListUsers(
    id: Int,
    username: String,
    created_at: Option(Timestamp),
    date_of_birth: Option(Date),
    profile: Option(String),
    extra_info: Option(String),
    favorite_numbers: Option(List(Int)),
    role: Option(UserRole),
    document: Option(BitArray),
  )
}

pub fn list_users() {
  let sql =
    "SELECT
  id, username, created_at, date_of_birth, profile, extra_info, favorite_numbers, role, document
FROM
  users
ORDER BY
  created_at DESC"
  #(sql, [], list_users_decoder())
}

pub fn list_users_decoder() -> decode.Decoder(ListUsers) {
  use id <- decode.field(0, decode.int)
  use username <- decode.field(1, decode.string)
  use created_at <- decode.field(2, decode.optional(dev.datetime_decoder()))
  use date_of_birth <- decode.field(
    3,
    decode.optional(dev.calendar_date_decoder()),
  )
  use profile <- decode.field(4, decode.optional(decode.string))
  use extra_info <- decode.field(5, decode.optional(decode.string))
  use favorite_numbers <- decode.field(
    6,
    decode.optional(decode.list(of: decode.int)),
  )
  use role <- decode.field(7, decode.optional(user_role_decoder()))
  use document <- decode.field(8, decode.optional(decode.bit_array))
  decode.success(ListUsers(
    id:,
    username:,
    created_at:,
    date_of_birth:,
    profile:,
    extra_info:,
    favorite_numbers:,
    role:,
    document:,
  ))
}

pub fn create_user(name name: String) {
  let sql =
    "INSERT INTO
  users (username)
VALUES
  ($1)"
  #(sql, [dev.ParamString(name)])
}

pub fn create_user_at(username username: String, created_at created_at: Float) {
  let sql =
    "INSERT INTO
  users (username, created_at)
VALUES
  ($1, to_timestamp($2::float))"
  #(sql, [dev.ParamString(username), dev.ParamFloat(created_at)])
}

pub fn create_user_with_date_of_birth(
  username username: String,
  date_of_birth date_of_birth: String,
) {
  let sql =
    "INSERT INTO users (username, created_at, date_of_birth)
VALUES ($1, CURRENT_TIMESTAMP, TO_TIMESTAMP($2::text, 'YYYY-MM-DDZ'))"
  #(sql, [dev.ParamString(username), dev.ParamString(date_of_birth)])
}

pub fn update_user_username(username username: String, id id: Int) {
  let sql =
    "UPDATE users
SET
  username = $1
WHERE
  id = $2"
  #(sql, [dev.ParamString(username), dev.ParamInt(id)])
}

pub fn delete_user(id id: Int) {
  let sql =
    "DELETE FROM users
WHERE
  id = $1"
  #(sql, [dev.ParamInt(id)])
}

pub type GetUserByUsername {
  GetUserByUsername(
    id: Int,
    username: String,
    created_at: Option(Timestamp),
    date_of_birth: Option(Date),
    profile: Option(String),
    extra_info: Option(String),
    favorite_numbers: Option(List(Int)),
    role: Option(UserRole),
    document: Option(BitArray),
  )
}

pub fn get_user_by_username(username username: String) {
  let sql =
    "SELECT
  id, username, created_at, date_of_birth, profile, extra_info, favorite_numbers, role, document
FROM
  users
WHERE
  username = $1
LIMIT
  1"
  #(sql, [dev.ParamString(username)], get_user_by_username_decoder())
}

pub fn get_user_by_username_decoder() -> decode.Decoder(GetUserByUsername) {
  use id <- decode.field(0, decode.int)
  use username <- decode.field(1, decode.string)
  use created_at <- decode.field(2, decode.optional(dev.datetime_decoder()))
  use date_of_birth <- decode.field(
    3,
    decode.optional(dev.calendar_date_decoder()),
  )
  use profile <- decode.field(4, decode.optional(decode.string))
  use extra_info <- decode.field(5, decode.optional(decode.string))
  use favorite_numbers <- decode.field(
    6,
    decode.optional(decode.list(of: decode.int)),
  )
  use role <- decode.field(7, decode.optional(user_role_decoder()))
  use document <- decode.field(8, decode.optional(decode.bit_array))
  decode.success(GetUserByUsername(
    id:,
    username:,
    created_at:,
    date_of_birth:,
    profile:,
    extra_info:,
    favorite_numbers:,
    role:,
    document:,
  ))
}

pub type GetUserByLowerUsername {
  GetUserByLowerUsername(
    id: Int,
    username: String,
    created_at: Option(Timestamp),
    date_of_birth: Option(Date),
    profile: Option(String),
    extra_info: Option(String),
    favorite_numbers: Option(List(Int)),
    role: Option(UserRole),
    document: Option(BitArray),
  )
}

pub fn get_user_by_lower_username(lower lower: String) {
  let sql =
    "SELECT
  id, username, created_at, date_of_birth, profile, extra_info, favorite_numbers, role, document
FROM
  users
WHERE
  username = lower($1)
LIMIT
  1"
  #(sql, [dev.ParamString(lower)], get_user_by_lower_username_decoder())
}

pub fn get_user_by_lower_username_decoder() -> decode.Decoder(
  GetUserByLowerUsername,
) {
  use id <- decode.field(0, decode.int)
  use username <- decode.field(1, decode.string)
  use created_at <- decode.field(2, decode.optional(dev.datetime_decoder()))
  use date_of_birth <- decode.field(
    3,
    decode.optional(dev.calendar_date_decoder()),
  )
  use profile <- decode.field(4, decode.optional(decode.string))
  use extra_info <- decode.field(5, decode.optional(decode.string))
  use favorite_numbers <- decode.field(
    6,
    decode.optional(decode.list(of: decode.int)),
  )
  use role <- decode.field(7, decode.optional(user_role_decoder()))
  use document <- decode.field(8, decode.optional(decode.bit_array))
  decode.success(GetUserByLowerUsername(
    id:,
    username:,
    created_at:,
    date_of_birth:,
    profile:,
    extra_info:,
    favorite_numbers:,
    role:,
    document:,
  ))
}

pub type SearchUsersByUsernamePattern {
  SearchUsersByUsernamePattern(id: Int, username: String)
}

pub fn search_users_by_username_pattern(patterns patterns: List(String)) {
  let sql =
    "SELECT id, username
FROM users
WHERE username LIKE ANY($1::text[])"
  #(
    sql,
    [dev.ParamList(list.map(patterns, dev.ParamString))],
    search_users_by_username_pattern_decoder(),
  )
}

pub fn search_users_by_username_pattern_decoder() -> decode.Decoder(
  SearchUsersByUsernamePattern,
) {
  use id <- decode.field(0, decode.int)
  use username <- decode.field(1, decode.string)
  decode.success(SearchUsersByUsernamePattern(id:, username:))
}
