//// Code generated by parrot. DO NOT EDIT.
////

import gleam/option.{type Option}
import gleam/dynamic/decode
import parrot/dev

pub type ListUsers {
  ListUsers(
    id: Int,
    username: String,
    created_at: Option(String)
  )
}

pub fn list_users(){
  let sql = "SELECT
  id, username, created_at
FROM
  users
ORDER BY
  created_at DESC"
  #(sql, Nil)
}

pub fn list_users_decoder() -> decode.Decoder(ListUsers) {
  use id <- decode.field(0, decode.int)
  use username <- decode.field(1, decode.string)
  use created_at <- decode.field(2, decode.optional(decode.string))
  decode.success(ListUsers(id: , username: , created_at: ))
}

pub fn create_user(username username: String){
  let sql = "INSERT INTO
  users (username)
VALUES
  (?)"
  #(sql, [dev.ParamString(username)])
}

pub fn update_user_username(username username: String, id id: Int){
  let sql = "UPDATE users
SET
  username = ?
WHERE
  id = ?"
  #(sql, [dev.ParamString(username), dev.ParamInt(id)])
}

pub fn delete_user(id id: Int){
  let sql = "DELETE FROM users
WHERE
  id = ?"
  #(sql, [dev.ParamInt(id)])
}

pub type GetUserByUsername {
  GetUserByUsername(
    id: Int,
    username: String,
    created_at: Option(String)
  )
}

pub fn get_user_by_username(username username: String){
  let sql = "SELECT
  id, username, created_at
FROM
  users
WHERE
  username = ?
LIMIT
  1"
  #(sql, [dev.ParamString(username)])
}

pub fn get_user_by_username_decoder() -> decode.Decoder(GetUserByUsername) {
  use id <- decode.field(0, decode.int)
  use username <- decode.field(1, decode.string)
  use created_at <- decode.field(2, decode.optional(decode.string))
  decode.success(GetUserByUsername(id: , username: , created_at: ))
}