import gleam/dynamic/decode as d
import gleam/io
import gleam/json
import gleam/string
import simplifile
import sqlc_gen_gleam/config.{
  type Config, Config, get_json_file, get_module_directory, get_module_path,
}
import sqlc_gen_gleam/internal/lib
import sqlc_gen_gleam/internal/project
import sqlc_gen_gleam/internal/sqlc.{type SQLC}

pub fn codegen_from_config(config: Config) {
  use json_string <- lib.try_nil(get_json_file(config))

  use dyn_json <- lib.try_nil(json.parse(from: json_string, using: d.dynamic))

  let assert Ok(parsed) = sqlc.decode_sqlc(dyn_json)

  let module_contents = gen_gleam_module(parsed)

  let _ =
    get_module_directory(config)
    |> simplifile.create_directory_all()
  let _ =
    simplifile.write(to: get_module_path(config), contents: module_contents)
    |> io.debug

  Ok(Nil)
}

pub fn gen_gleam_module(schema: SQLC) {
  comment_dont_edit()
}

pub fn comment_dont_edit() {
  let assert Ok(version) = project.version()
  "
  //// Code generated by sqlc_gen_gleam. DO NOT EDIT.
  //// versions:
  ////   sqlc_gen_gleam v{version}
  ////
  "
  |> string.replace("{version}", version)
  |> lib.dedent
}
